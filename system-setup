#!/bin/bash
<<DETAILS
Set up a new system with my preferred packages.
Usage: ./system-setup
DETAILS

echo -e "Starting system setup...\n"

##############
# Programming
##############

# Install pip3 for default python3 on Linux
echo -e "\n\nPython3 and pip:\n"
sudo apt update
sudo apt install python3-pip

# Intall bash-wakatime
echo -e "\n\nWakaTime coding metrics:\n"
pip3 install wakatime
git clone https://github.com/gjsheep/bash-wakatime.git "$HOME"/.local/share/bash-wakatime

# Wakatime config file
if [ ! -f "$HOME"/.wakatime.cfg ]; then
    echo -e "\n\nWakaTime config file setup:\n"
    read -p "Enter WakaTime API Key: " key
    echo -e """[settings]
debug = false
hidefilenames = false
ignore =
    COMMIT_EDITMSG$
    PULLREQ_EDITMSG$
    MERGE_MSG$
    TAG_EDITMSG$
api_key=$key
""" > "$HOME"/.wakatime.cfg
fi

# Java (default v11)
echo -e "\n\nDefault JDK installation:\n"
sudo apt install default-jdk

# Nodejs (for nvim plugins etc.)
echo -e "\n\nNode.js LTS:\n"
curl --fail -LSs https://install-node.now.sh/lts | sudo bash

# LaTeX
read -rep $'\n\nInstall LaTeX? [y/n] ' latex
if [ "$latex" == 'y' ] || [ "$latex" == 'yes' ]; then
    echo -e "\nInstalling..."
    sudo apt-get install texlive texlive-pictures texlive-latex-extra texlive-xetex
    sudo apt install chktex # linter used by ale for vim
else
    echo -e "Not installing LaTeX.\n"
fi


##########
# Vim
##########

echo -e "\n\nVim:\n"
sudo add-apt-repository ppa:jonathonf/vim
sudo apt update

# Update vim version
sudo apt install vim

# NeoVim
echo -e "\n\nNeoVim:\n"
sudo add-apt-repository ppa:neovim-ppa/stable
sudo apt update
sudo apt install neovim

echo -e "\n\nPython3 provider for nvim:\n"
pip3 install --user --upgrade pynvim # python3 provider for neovim

# linting/formatting
echo -e "\n\nALE linters/fixers:\n"
pip3 install isort # coc-pyright python import sorter
pip3 install autopep8
pip3 install flake8
npm install -g prettier
sudo apt install shellcheck # shell linter

# HTML live server
echo -e "\n\nHTML live server:\n"
npm install -g live-server


###############
# Misc./System
###############

# fzf fuzzy finder
echo -e "\n\nFuzzy finder fzf:\n"
git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME"/.fzf
"$HOME"/.fzf/install

# Rigrep
echo -e "\n\nRipgrep (rg):\n"
sudo apt-get install ripgrep

# Silver Searcher
echo -e "\n\nSilver searcher Ag:\n"
sudo apt-get install silversearcher-ag

# ZSH
echo -e "\n\nZSH, oh-my-zsh:\n(Note: \"exit\" from oh-my-zsh to resume setup)\n"
sudo apt install zsh
# oh my zsh will start a sub-shell, just "exit" and the this setup script will continue
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
mv "$HOME"/.zshrc.pre-oh-my-zsh "$HOME"/.zshrc
sudo apt install command-not-found

# trash-cli (safer alternative to rm -rf)
echo -e "\n\nTrash CLI:\n"
sudo apt install trash-cli

# tdlr; (man, but with examples)
echo -e "\n\nTLDR:\n"
sudo apt install tldr && tldr

# https://github.com/chubin/cheat.sh
echo -e "\n\nCheat sheat:\n"
curl https://cht.sh/:cht.sh > "$HOME"/.local/bin/cht.sh
chmod +x "$HOME"/.local/bin/cht.sh

# zip (in case tar.gz won't do)
echo -e "\n\nZip:\n"
sudo apt install zip

# bat (a cat clone, with syntax highlighting)
echo -e "\n\nBat:\n"
wget https://github.com/sharkdp/bat/releases/download/v0.15.4/bat_0.15.4_amd64.deb
sudo dpkg -i bat_0.15.4_amd64.deb
rm -rf bat_0.15.4_amd64.deb


echo -e "\nSystem setup complete!\n"
